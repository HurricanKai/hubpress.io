<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Untitled RSS Feed]]></title><description><![CDATA[Untitled RSS Feed]]></description><link>https://HurricanKai.github.io/Blog</link><generator>RSS for Node</generator><lastBuildDate>Tue, 28 Nov 2017 20:55:42 GMT</lastBuildDate><atom:link href="https://HurricanKai.github.io/Blog/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Hello World!]]></title><description><![CDATA[<div class="paragraph">
<p>Its the 28.11.2017, 20:54.</p>
</div>
<div class="paragraph">
<p>Hi! Whats up?</p>
</div>
<div class="paragraph">
<p>So, Today i did Setup this awesome Page!
Also, im in the Process of Writing An C# Beginner Tutorial.
Amazing right? Im gonna post the First Part today!
Well actualy, im gonna start to write it NOW.</p>
</div>
<div class="paragraph">
<p>Bye.</p>
</div>
<div class="paragraph">
<p>Its the 28.11.2017, 20:56.</p>
</div>]]></description><link>https://HurricanKai.github.io/Blog/2017/11/28/Hello-World.html</link><guid isPermaLink="true">https://HurricanKai.github.io/Blog/2017/11/28/Hello-World.html</guid><category><![CDATA[My First Blog]]></category><dc:creator><![CDATA[HurricanKai]]></dc:creator><pubDate>Tue, 28 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[C# For Beginners, or something like that.]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Hi, so, you want to / are learning C#, also known as CSharp, or CS</p>
</div>
<div class="paragraph">
<p>So first We need to understand the</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_basic_structure_of_c">Basic Structure of C#</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you know C++ you may know this, even thought its not the same.</p>
</div>
<div class="paragraph">
<p>First we got the</p>
</div>
<div class="sect2">
<h3 id="_namespace">Namespace</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>namespace HelloWorld
{
 //Other Stuff Here
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>or</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>namespace HelloWorld { /*Other Stuff Here*/ }</code></pre>
</div>
</div>
<div class="paragraph">
<p>as you can see C# doesnt cares about Lines, (Besides Comments).
There isnt anything more to this so
next, inside the namespace we have got the</p>
</div>
</div>
<div class="sect2">
<h3 id="_class">Class</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>[Access Mod] class &lt;name&gt;
{

}</code></pre>
</div>
</div>
<div class="paragraph">
<p>So, Thats All, just that, You Coud add the Access Modifier (or how you wanna call it), but thats optional. But we will come to that later.</p>
</div>
<div class="paragraph">
<p>Next We have 3 Types. Fields &amp; Properties first:</p>
</div>
</div>
<div class="sect2">
<h3 id="_fields_properties">Fields &amp; Properties</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>[Access Mod] &lt;type&gt; MyProperty { get; set; }
[Access Mod] &lt;type&gt; MyField;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Types are the Most Important Thing in Programming Realy, But ill explain them Later still.</p>
</div>
<div class="paragraph">
<p>So these are nearly the same.
The Field is actualy used to Store Your data, while The Property realy is used for Accesing it Outside your Class.</p>
</div>
<div class="paragraph">
<p><code>{ get; set; }</code> is only a shortcut. behind that is acutaly an function every time, so the next Thing in the Class:</p>
</div>
</div>
<div class="sect2">
<h3 id="_functions">Functions</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>[Access Mod] [Function Mod] &lt;type | void&gt; &lt;Function Name&gt;([Parameters])
{
// Your Logic Here.
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This looks Realy Complicated i know, but [Function Mod] Is nearly Never Present.</p>
</div>
<div class="paragraph">
<p>Parameters are basicaly Just and Field without Access Mod, seperated by Commas,</p>
</div>
<div class="paragraph">
<p>Functions can be Called Like This:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>static void Main()
{
    MyFunction();

    int i = MyFunctionWithReturn();

    MyFunctionWithArgs(0);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>What is all this? Well lets have a look Line-by-Line</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>static void Main()</code></pre>
</div>
</div>
<div class="paragraph">
<p>That is, as you maybe have noticed, an function.
Main is the Application Entry Point, so The Function Called when Starting The Programm, <code>static</code> just means it can be Called Without an Instance Ref (We will see that in detail later)</p>
</div>
<div class="paragraph">
<p><code>void</code> Means it Returns Nothing.</p>
</div>
<div class="paragraph">
<p>so below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>MyFunction();</code></pre>
</div>
</div>
<div class="paragraph">
<p>this Just Tells Our Programm to Run Anything inside <code>MyFunction()</code> the <code>;</code> ends the Line.</p>
</div>
<div class="paragraph">
<p><strong><em>Remark</em></strong>: <strong>All</strong> Logic Instructions Are Ended with an <strong>';'</strong>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>int i = MyFunctionWithReturn();</code></pre>
</div>
</div>
<div class="paragraph">
<p>Represents a Function That Returns the Type <code>int</code> and how its read.</p>
</div>
<div class="paragraph">
<p>Technicaly you dont have to store the Result in an <em>local variable</em></p>
</div>
<div class="paragraph">
<p><strong><em>Remark</em></strong>: <em>local variables</em> are just like fields, but only accesable inside the Function they are Definded in.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>MyFunctionWithArgs(0);</code></pre>
</div>
</div>
<div class="paragraph">
<p>This Represents a Function with Arguments. this Function takes an <code>int</code> as input, which then can be used inside the Function.</p>
</div>
<div class="paragraph">
<p>Its also Possible to Input an Variable, Field or Property.</p>
</div>
<div class="paragraph">
<p>And you can combine Returning &amp; Arguments.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>int i = GetI(i);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Wont Work because:</p>
</div>
<div class="paragraph">
<p>a) the Name <code>i</code> is already taken, so the Variable Definition wont Work.</p>
</div>
<div class="paragraph">
<p>b) its Not Possible to use an Undefined variable, which i is before its set by The Function <code>GetI(int i);</code> (Normaly an example with an int is named "i", just an common).</p>
</div>
<div class="paragraph">
<p>So, you want to get Into it now?</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_then_go_to_the_next_blog_post">Then Go to the Next Blog Post.</h2>
<div class="sectionbody">

</div>
</div>]]></description><link>https://HurricanKai.github.io/Blog/2017/11/28/C-For-Beginners-or-something-like-that.html</link><guid isPermaLink="true">https://HurricanKai.github.io/Blog/2017/11/28/C-For-Beginners-or-something-like-that.html</guid><category><![CDATA[Tutorial]]></category><category><![CDATA[C#]]></category><dc:creator><![CDATA[HurricanKai]]></dc:creator><pubDate>Tue, 28 Nov 2017 00:00:00 GMT</pubDate></item></channel></rss>